services:
  web:
    container_name: web
    image: docker-tut-web:latest
    build:
      context: ./app
      dockerfile: Dockerfile
    command: python manage.py runserver 0.0.0.0:8000
    volumes:
      - ./app/media:/usr/src/app/media
    ports:
      #- :8001 # nginx default.conf required the internal container port!
      - 9001:8000
      #- 80:8000 # This works externally!
    env_file:
      - ./app/.env
    restart: 'no' # always|unless-stopped
    networks: 
      - app_network
    depends_on:
      - db
  web2:
    container_name: web2
    image: docker-tut-web2:latest
    build:
      context: ./app2
      dockerfile: Dockerfile
    command: python manage.py runserver 0.0.0.0:8000
    volumes:
      - ./app2/media:/usr/src/app2/media
    ports:
      #- :8002 # nginx default.conf required the internal container port!
      - 9002:8000
      #- 80:8000 # This works externally!
    env_file:
      - ./app2/.env
    restart: 'no' # always|unless-stopped
    networks: 
      - app_network
    depends_on:
      - db
  db:
    container_name: db
    #image: postgres:15
    image: postgis/postgis:15-3.4
    volumes:
      - postgres_data:/var/lib/postgresql/data/
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    env_file:
      - ./.env
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_EXTENSIONS=${POSTGRES_EXTENSIONS}

      # psql -h db -U postgres -d postgres
    networks: 
      - app_network

  nginx:
    container_name: nginx
    image: nginx-base:latest
    # network_mode: host
    build:
      context: ./nginx
      dockerfile: Dockerfile
    ports:
      - 80:80
#      - 443:443
    links:
      - web
      - web2
    networks: 
      - app_network

volumes:
  postgres_data:

# https://medium.com/@kesaralive/diving-deeper-into-docker-networking-with-docker-compose-737e3b8a3c8c
networks:
  app_network:
    name: app_network
    driver: bridge
